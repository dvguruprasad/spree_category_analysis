start_date = '13-01-14';
$(function () {
    var chart;
    var current_view = "weekly";
    //TODO Remove this line when the method is fixed
    response.start_of_year = '2013-01-01';
    date_date = '17-01-14';
    $('#toggle').buttonset();
    $('#back-forward').buttonset();
    $('#simulate-button').buttonset();
    $("#simulate").click(function(){
        var start_date = $("#alternate_from").val() 
        var end_date = $("#alternate_to").val()
        var percentage = $("#percentage").val()

        var send_data = {
            forecast_date: response.date_of_forecast,
            product_id: response.product_id,
            promotion_data: {
                start_date: convert_to_date_format(new Date(start_date),"yy-mm-dd"),
                end_date: convert_to_date_format(new Date(end_date),"yy-mm-dd"),
                promotion_type: "P",
                promotion_percentage:percentage 
            }
        };
        $.ajax({
            url: "/admin/promotion_simulator/simulate/",
            dataType: 'json',
            type: 'GET',
            data: send_data,
            success: function(response) {
                show_sales_statistics(response.stats_report);
                if(current_view == "cumulative"){
                create_or_replace("Cumulative Simulated Sales", response.cumulative_simulated_revenue);
                create_or_replace("Cumulative Simulated Margin", response.cumulative_simulated_margin);
              }
              else if(current_view == "weekly"){
                create_or_replace("Simulated Sales", response.weekly_simulated_revenue);
                create_or_replace("Simulated Margin", response.weekly_simulated_margin);
              }
              else
                {
                create_or_replace("Cumulative Simulated Sales", response.cumulative_simulated_revenue);
                create_or_replace("Cumulative Simulated Margin", response.cumulative_simulated_margin);
                create_or_replace("Simulated Sales", response.weekly_simulated_revenue);
                create_or_replace("Simulated Margin", response.weekly_simulated_margin);
                }
               set_inventory_data(response.simulated_inventory_positions); 
            },
        });
    });
    series = {"weekly":[{
        name: 'Weekly Forecast',
        <%#color: '#FF33CC',%>
        type: 'line',
        yAxis: 0,
        data: response.weekly_revenue
    },{
        name: 'Weekly Margin',
        <%#color: '#0033CC',%>
        type: 'line',
        yAxis: 0,
        data: response.weekly_margin
    },{
        name: 'Weekly Target Revenue',
        <%#color: '#003333',%>
        type: 'line',
        yAxis: 0,
        data: response.weekly_target_revenue

    }],
    "cumulative" : [{
        name: 'Target Sale for Period',
        color: '#89A54E',
        type: 'line',
        yAxis: 0,
        data: [response.sum_target_revenue,response.sum_target_revenue,response.sum_target_revenue,response.sum_target_revenue,response.sum_target_revenue,response.sum_target_revenue]
    },{
        name: 'Sales Last Year',
        color: '#8B2500',
        type: 'line',
        yAxis: 0,
        data: response.cumulative_last_year_weekly_revenue
    },{
        name: 'Margin',
        color: '#CC0033',
        type: 'line',
        yAxis: 0,
        data: response.cumulative_weekly_margin
    },{
        name: 'Forecast',
        color: '#A54E89',
        type: 'line',
        yAxis: 0,
        data: response.cumulative_weekly_revenue

    }]
    };

    draw_custom_chart(series[current_view]);
    convert_day_to_date = function(day){
        date1 = new Date(response.start_of_year);
        date_epoch = ( date1.setDate(date1.getDate() + day -1));
        return date_epoch
    };
    convert_to_date_format = function(date_epoch, format){
        return date_epoch.format(format);
    };
    set_inventory_data = function(positions){
      create_or_replace("Inventory",positions);
    }

    create_or_replace = function(name,value){
      value_chart = find_chart(name);
      if(value_chart) {
        value_chart.setData(value);
        chart.redraw();
      }
      else{
        chart.addSeries({data: value, name: name, type: "line", yAxis: 0, dashStyle: 'Dash',});
      }
    }

    find_chart = function(name){
      for (index in chart.series) {
        if(chart.series[index].name == name) 
          return chart.series[index]
      }
    }

    function weekly_view(){
        current_view = "weekly";
        draw_custom_chart(series["weekly"]);
    }
    function cumulative_view(){
        current_view = "cumulative";
        draw_custom_chart(series["cumulative"]);

    }
    function weekly_cumulative_view(){
        current_view = "weekly_cumulative";
        draw_custom_chart(series["cumulative"].concat(series["weekly"]));
    }

    function draw_custom_chart(additional_series){
        chart_options = {
            chart: {
                renderTo: 'container',
                zoomType: 'xy'
            },
            title: {
                text: 'Promotion Simulator'
            },
            xAxis: [{
                categories: ['Current Week', 'Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5']
            }],
            yAxis: [{ // Primary yAxis
                labels: {
                    formatter: function() {
                        return this.value;
                    },
                    style: {
                        color: '#89A54E'
                    }
                },
                title: {
                    text: '<%= Spree::Config[:currency] %>',
                    style: {
                        color: '#89A54E'
                    }
                }
            }
            ],
            tooltip: {
                formatter: function() {
                    return ''+
                        this.x +': '+ this.y +' '+ '<%= Spree::Config[:currency] %>';
                }
            },
            legend: {
                layout: 'horizontal',
                align: 'left',
                x: 120,
                verticalAlign: 'top',
                y: 100,
                floating: true,
                backgroundColor: '#FFFFFF'
            },
            series: []
        };
        inventory_data_with_color_code = [];
        inventory_positions = response.inventory_positions
        INVENTORY_THRESHOLD = 50 * 8.1;
        for(i=0;i<inventory_positions.length;i++){
            data_object = {}
            data_object["y"] = inventory_positions[i];
            if(inventory_positions[i] < INVENTORY_THRESHOLD)
                data_object["color"] = '#FF0000';
            else
                data_object["color"] = '#3B5998';

            inventory_data_with_color_code.push(data_object)
        }
        inventory_object = {
            name: 'Inventory',
            type: 'column',
            yAxis: 0,
            data: inventory_data_with_color_code

        };

        chart_options.series.push(inventory_object)
        chart_options.series = chart_options.series.concat(additional_series)
        chart = new Highcharts.Chart(chart_options);

    }
    $('#weekly_view').click(weekly_view);
    $('#cumulative_view').click(cumulative_view);
    $('#weekly_cumulative_view').click(weekly_cumulative_view);

});
$(function() {
    $( "#from" ).datepicker({
        defaultDate: "+1w",
        changeMonth: true,
        numberOfMonths: 1,
        minDate: start_date,
        altField: "#alternate_from",
        dateFormat: "yy-mm-dd",
        onClose: function( selectedDate ) {
            $( "#to" ).datepicker( "option", "minDate", selectedDate );
        }
    });
    $( "#to" ).datepicker({
        defaultDate: "+1w",
        changeMonth: true,
        numberOfMonths: 1,
        minDate: start_date,
        altField: "#alternate_to",
        dateFormat: "yy-mm-dd",
        onClose: function( selectedDate ) {
            $( "#from" ).datepicker( "option", "maxDate", selectedDate );
        }
    });
});
