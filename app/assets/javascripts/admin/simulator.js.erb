var ReportChart = function(view) {
    var chart;
    this.current_view = view;
    this.series = {};
    this.series[this.current_view] = [];
    this.chart_options = {
        chart: {
            renderTo: 'container',
            zoomType: 'xy',
            marginRight:180
        },
        credits:{
            enabled:false
        },
        title: {
            text: ''
         },
        xAxis: [{
            categories: ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5', 'Week 6']
        }],
        yAxis: [{ // Primary yAxis
//            gridLineColor: "#000",
            plotLines: [{
                color: '#FF0000',
                width: 2,
                value: 2
            }],
            labels: {
                formatter: function() {
                    return this.value;
                },
                style: {
                    color: '#89A54E'
                }
            },
            title: {
                text: '<%= Spree::Config[:currency] %>',
                style: {
                    color: '#89A54E'
                }
            }}
        ],
        tooltip: {
            formatter: function() {
                return '' + this.x + ': ' + this.y + ' ' + '<%= Spree::Config[:currency] %>';
            }
        },
        legend: {
            layout: 'vertical',
            align: 'right',
            verticalAlign: 'top',
            floating: true,
            backgroundColor: '#FFFFFF',
            itemMarginTop: 3,
            itemMarginBottom: 3

        },
        series: this.series[this.current_view]
    };

    this.add_series = function(series_object){
        this.series[this.current_view].push(series_object);
    };
    var get_legend_date = function(week_start_date,week){
      var from_date = new Date(week_start_date);
      var to_date = new Date(week_start_date);
      var legend_start_date = from_date.setDate(from_date.getDate()+(week*7));
      var legend_end_date = to_date.setDate(to_date.getDate()+((week*7)+6));
      return new Date(legend_start_date).format("dd-mmm-yyyy")+ " to " + new Date(legend_end_date).format("dd-mmm-yyyy");

            };
    this.setDataFor = function(index, data){
        this.series[this.current_view][index].data = data;
    };

    this.find_chart = function(name) {
        var index;
        for (index in this.series[this.current_view]) {
            if (this.series[this.current_view][index].name == name){
                return index;
            }
        }
    };
    this.redraw = function(){
        this.draw();
    };

    this.create_or_replace = function(name, value, lineWidth) {
        for(var i =0; i<value.length; i++)
        {
            value[i] = Math.round(value[i])
        }
        width = lineWidth || 2;
        console.log(name + value+" this is i found");
        index = this.find_chart(name);
        value_chart = this.series[this.current_view][index]
//        console.log(value_chart);
        if (value_chart) {
            if(value_chart.name == "Inventory"){
                this.setDataFor(index, this.inventory_chart_object(value));
            }
            else{
                this.setDataFor(index, value);
            }
            this.redraw();
        }
        else {
            this.add_series({
                data: value,
                name: name,
                type: "line",
                yAxis: 0,
                dashStyle: 'Dash',
                lineWidth: width
            });
            this.redraw();
        }
    };
    this.inventory_chart_object = function(inventory_positions){
        inventory_data_with_color_code = [];
        INVENTORY_THRESHOLD = 50 * 8.1;
        for(i=0;i<inventory_positions.length;i++){
            data_object = {}
            data_object["y"] = inventory_positions[i];
            if(inventory_positions[i] < INVENTORY_THRESHOLD)
                data_object["color"] = '#FF0000';
            else
                data_object["color"] = '#3B5998';

            inventory_data_with_color_code.push(data_object)
        }
        return inventory_data_with_color_code ;

    };

    this.draw = function(){
        this.chart_options.series = this.series[this.current_view];
        console.log(this.chart_options);
        this.chart = new Highcharts.Chart(this.chart_options);
    };

};
